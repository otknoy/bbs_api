/*
 * BBS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"BoardListGet",
			strings.ToUpper("Get"),
			"/boardList",
			c.BoardListGet,
		},
		{
			"ServerIdBoardIdThreadListGet",
			strings.ToUpper("Get"),
			"/{server_id}/{board_id}/threadList",
			c.ServerIdBoardIdThreadListGet,
		},
		{
			"ServerIdBoardIdThreadThreadIdGet",
			strings.ToUpper("Get"),
			"/{server_id}/{board_id}/thread/{thread_id}",
			c.ServerIdBoardIdThreadThreadIdGet,
		},
	}
}

// BoardListGet -
func (c *DefaultApiController) BoardListGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BoardListGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ServerIdBoardIdThreadListGet -
func (c *DefaultApiController) ServerIdBoardIdThreadListGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverId := params["server_id"]

	boardId := params["board_id"]

	result, err := c.service.ServerIdBoardIdThreadListGet(r.Context(), serverId, boardId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ServerIdBoardIdThreadThreadIdGet -
func (c *DefaultApiController) ServerIdBoardIdThreadThreadIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverId := params["server_id"]

	boardId := params["board_id"]

	threadId := params["thread_id"]

	result, err := c.service.ServerIdBoardIdThreadThreadIdGet(r.Context(), serverId, boardId, threadId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
